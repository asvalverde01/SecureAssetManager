using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using SecureAssetManager.Data;
using SecureAssetManager.Models;
using System.Linq;
using System.Threading.Tasks;

namespace SecureAssetManager.Controllers
{
    public class VulnerabilityController : Controller
    {
        private readonly ApplicationDbContext _context;

        public VulnerabilityController(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<IActionResult> Index()
        {
            return View(await _context.Vulnerabilities.ToListAsync());
        }

        public IActionResult Create()
        {
            var assets = _context.Assets.ToList();
            ViewBag.AssetCodes = new SelectList(assets, "CodigoActivo", "CodigoActivo");
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("AssetCode,IsHardware,IsSoftware,IsNetwork,IsSite,VulnerabilityLevel,Probability")] Vulnerability vulnerability)
        {
            if (ModelState.IsValid)
            {
                _context.Add(vulnerability);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(vulnerability);
        }

        public async Task<IActionResult> Details(string assetCode)
        {
            if (assetCode == null)
            {
                return NotFound();
            }

            var vulnerability = await _context.Vulnerabilities
                .FirstOrDefaultAsync(m => m.AssetCode == assetCode);
            if (vulnerability == null)
            {
                return NotFound();
            }

            return View(vulnerability);
        }

        public async Task<IActionResult> Edit(string assetCode)
        {
            if (assetCode == null)
            {
                return NotFound();
            }

            var vulnerability = await _context.Vulnerabilities.FindAsync(assetCode);
            if (vulnerability == null)
            {
                return NotFound();
            }
            return View(vulnerability);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(string assetCode, [Bind("AssetCode,IsHardware,IsSoftware,IsNetwork,IsSite,VulnerabilityLevel,Probability")] Vulnerability vulnerability)
        {
            if (assetCode != vulnerability.AssetCode)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(vulnerability);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!VulnerabilityExists(vulnerability.AssetCode))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(vulnerability);
        }

        public async Task<IActionResult> Delete(string assetCode)
        {
            if (assetCode == null)
            {
                return NotFound();
            }

            var vulnerability = await _context.Vulnerabilities
                .FirstOrDefaultAsync(m => m.AssetCode == assetCode);
            if (vulnerability == null)
            {
                return NotFound();
            }

            return View(vulnerability);
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(string assetCode)
        {
            var vulnerability = await _context.Vulnerabilities.FindAsync(assetCode);
            _context.Vulnerabilities.Remove(vulnerability);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool VulnerabilityExists(string assetCode)
        {
            return _context.Vulnerabilities.Any(e => e.AssetCode == assetCode);
        }
    }
}
